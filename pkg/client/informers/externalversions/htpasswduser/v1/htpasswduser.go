// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	htpasswduserv1 "htpasswd-operator/pkg/apis/htpasswduser/v1"
	"htpasswd-operator/pkg/client/clientset/versioned"
	"htpasswd-operator/pkg/client/informers/externalversions/internalinterfaces"
	v1 "htpasswd-operator/pkg/client/listers/htpasswduser/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

// HtpasswdUserInformer provides access to a shared informer and lister for
// HtpasswdUsers.
type HtpasswdUserInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.HtpasswdUserLister
}

type htpasswdUserInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewHtpasswdUserInformer constructs a new informer for HtpasswdUser type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewHtpasswdUserInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredHtpasswdUserInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredHtpasswdUserInformer constructs a new informer for HtpasswdUser type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredHtpasswdUserInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.FlangaV1().HtpasswdUsers(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.FlangaV1().HtpasswdUsers(namespace).Watch(context.TODO(), options)
			},
		},
		&htpasswduserv1.HtpasswdUser{},
		resyncPeriod,
		indexers,
	)
}

func (f *htpasswdUserInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredHtpasswdUserInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *htpasswdUserInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&htpasswduserv1.HtpasswdUser{}, f.defaultInformer)
}

func (f *htpasswdUserInformer) Lister() v1.HtpasswdUserLister {
	return v1.NewHtpasswdUserLister(f.Informer().GetIndexer())
}
